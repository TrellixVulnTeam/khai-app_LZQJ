{"version":3,"sources":["i18n.js","App.js","reportWebVitals.js","index.js"],"names":["i18n","use","initReactI18next","init","resources","en","translation","fr","cn","bm","lng","interpolation","escapeValue","myLang","InputValidate","useState","usrnameActive","setusrnameActive","pswordActive","setpswordActive","console","log","type","className","length","placeholder","onKeyUp","e","target","value","LanguageList","n","langList","listLang","map","v","onChange","changeLanguage","Connectdb","error","setError","isLoaded","setIsLoaded","setItems","requestOptions","method","headers","body","JSON","stringify","email","password","useEffect","fetch","then","res","json","result","message","App","class","size","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.294e6543.chunk.js","sourcesContent":["import i18n from \"i18next\";\r\nimport { initReactI18next } from \"react-i18next\";\r\n\r\n// the translations\r\n// (tip move them in a JSON file and import them,\r\n// or even better, manage them separated from your code: https://react.i18next.com/guides/multiple-translation-files)\r\nconst resources = {\r\n  en: {\r\n    translation: {\r\n        \"nameTitle\": \"{{name}}\",\r\n        \"userMessagesUnread\": \"Hello <1>{{name}}</1>, you have {{count}} unread message. <5>Go to message</5>.\",\r\n        \"userMessagesUnread_plural\": \"Hello2 <1>{{name}}</1>, you have {{count}} unread messages.  <5>Go to messages</5>.\",\r\n    }\r\n  },\r\n  fr: {\r\n    translation: {\r\n        \"nameTitle\": \"{{name}}\",\r\n        \"userMessagesUnread\": \"Hello <1>{{name}}</1>, you have {{count}} unread message. <5>Go to message</5>.\",\r\n        \"userMessagesUnread_plural\": \"你好 <1>{{name}}</1>, you have {{count}} unread messages.  Go to messages.\",\r\n    }\r\n  },\r\n  cn: {\r\n    translation: {\r\n        \"userMessagesUnread_plural\": \"作业论文是从固定问题发展而来的，这些问题让学生有一段时间研究一个主题，并参考他们的信息来源得出答案。虽然使用作业论文作为评估工具有一些缺点，但这种做法有良好的教育目的。本文探讨了作业论文对学生学习有益的原因，并考虑了这种评估方法的一些问题。\",\r\n        \"cn_lang\":\"中文\",\r\n        \"bm_lang\":\"马来文\"\r\n    }\r\n  },\r\n  bm: {\r\n    translation: {\r\n        \"userMessagesUnread_plural\": \"Esei tugasan dikembangkan dari soalan set yang memberi pelajar jangka masa untuk meneliti sesuatu topik dan menghasilkan jawapan mereka dengan merujuk kepada sumber maklumat mereka. Walaupun terdapat beberapa kelemahan menggunakan karangan tugasan sebagai alat penilaian, terdapat tujuan pendidikan yang kukuh yang menyokong amalan ini. Esei ini mengkaji sebab-sebab mengapa karangan tugasan bermanfaat untuk pembelajaran pelajar dan mempertimbangkan beberapa masalah dengan kaedah penilaian ini.\",\r\n        \"cn_lang\":\"Chinese\",\r\n        \"bm_lang\":\"Malay\"\r\n    }\r\n  }\r\n};\r\n\r\ni18n\r\n  .use(initReactI18next) // passes i18n down to react-i18next\r\n  .init({\r\n    resources,\r\n    lng: \"bm\", // language to use, more information here: https://www.i18next.com/overview/configuration-options#languages-namespaces-resources\r\n    // you can use the i18n.changeLanguage function to change the language manually: https://www.i18next.com/overview/api#changelanguage\r\n    // if you're using a language detector, do not define the lng option\r\n\r\n    interpolation: {\r\n      escapeValue: false // react already safes from xss\r\n    }\r\n  });\r\n\r\n  export default i18n;","import React,{useState,useEffect} from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.scss';\nimport i18n from './i18n.js';\nimport { withNamespaces } from 'react-i18next';\nimport { AiFillFacebook } from \"react-icons/ai\";\n\n\n// change language function\nconst changeLanguage = (lng) => {\n  i18n.changeLanguage(lng);\n}\n\n\nconst myLang = [\n  {\"n\": \"中文\",\"v\": \"cn\"},\n  {\"n\": \"English\",\"v\": \"en\"},\n  {\"n\": \"Bahasa Melayu\",\"v\": \"bm\"}\n]\n\nfunction InputValidate(){\n  let [usrnameActive,setusrnameActive] = useState('');\n  let [pswordActive,setpswordActive] = useState('');\n\n  console.log(usrnameActive)\n\n  return(\n    <>\n    <input type=\"text\" className={`input-form login-input ${usrnameActive.length > 0 ? 'hasLength': ''}`} placeholder=\"Phone number, username or email address\" onKeyUp={(e) => setusrnameActive(usrnameActive = e.target.value)}/>\n    <input type=\"password\" className={`input-form login-input ${pswordActive.length > 0 ? 'hasLength': ''}`} placeholder=\"Password\"  onKeyUp={(e) => setpswordActive(pswordActive = e.target.value)}/>\n    </>\n  )\n\n}\n\nfunction LanguageList() {\n  const [lang,langList] = useState({n:'cn'})\n  const listLang = myLang.map((myLang) => <option key={myLang.v} value={myLang.v}>{myLang.n}</option>)\n\n  const submitValue = () => {\n    const frmdetails = {\n        'language' : lang,\n    }\n    console.log(frmdetails);\n  }\n  return(\n    // <form>\n    //   <input type=\"text\" value={lang.n} onChange={e => langList}/>\n    //   <input type=\"text\"/>\n    //   <div>your lang is {lang.n}</div>\n    // </form>\n      <select onChange={e => langList(changeLanguage(e.target.value))}>\n        {listLang}\n      </select>\n\n  )\n}\n\nfunction Connectdb(){\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [items, setItems] = useState([]);\n\n  const payload ={\n    email: \"eve.holt@reqres.in\",\n    password: \"cityslicka\"\n  }\n  const requestOptions = {\n    method: 'POST',\n    headers: { 'Accept': 'application/json','Content-Type': 'application/json' },\n    body: JSON.stringify(payload)\n  };\n\n  useEffect(() => {\n    fetch('https://reqres.in/api/login',requestOptions)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          console.log(result)\n          setIsLoaded(true);\n          setItems(result);\n        },\n        // 注意：需要在此处处理错误\n        // 而不是使用 catch() 去捕获错误\n        // 因为使用 catch 去捕获异常会掩盖掉组件本身可能产生的 bug\n        (error) => {\n          setIsLoaded(true);\n          setError(error);\n        }\n      )\n  }, [])\n\n  if(error){\n    return <div>Error : {error.message}</div>\n  }else if(!isLoaded){\n    return <div>Loading...</div>\n  }else{return <div>yaya</div>}\n\n}\n\nexport default class App extends React.Component{\n  \n  render() {\n    return(\n\n    <main>\n      <nav>\n        <div class=\"topnav\">\n          <div class=\"topnav_left\">...</div>\n          <div class=\"topnav_center\"><LanguageList /></div>\n        </div>\n      </nav>\n      <div className=\"logo-title\">\n        <h1>Instragram</h1>\n      </div>\n      <form className=\"login-form\">\n        <button className=\"input-form\"><span className=\"icon-fb\"><AiFillFacebook size={20}/></span><span>Continue Using Facebook</span></button>\n        <div className=\"container-or\">\n          <div className=\"line-or\"></div>\n          <div className=\"text-or\">OR</div>\n          <div className=\"line-or\"></div>\n        </div>\n        <InputValidate />\n        <div className=\"input-form\">\n          <a>Forgot password?</a>\n        </div>\n        <button className=\"input-form\">Log In</button>\n        <Connectdb />\n      </form>\n    </main>\n    )\n  }\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, {useState} from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport './i18n';\r\nimport i18n from './i18n.js';\r\nimport reportWebVitals from './reportWebVitals';\r\n// the hoc\r\nimport { withTranslation } from 'react-i18next';\r\nimport { Trans, useTranslation } from 'react-i18next';\r\nimport { BrowserRouter as Router, Switch, Route, Link} from \"react-router-dom\";\r\n\r\n// function MyComponent() {\r\n//   const { t } = useTranslation('myNamespace');\r\n\r\n//   return <Trans t={t}>Welcome to React</Trans>;\r\n// }\r\n\r\n\r\n// 成功案例\r\n// function MyComponent({ person, messages }) {\r\n//   const name = person;\r\n//   // console.log(name)\r\n//   const count = messages.length;\r\n//   const { t } = useTranslation();\r\n\r\n//   return (\r\n//     <Trans i18nKey=\"userMessagesUnread_plural\" count={count}>\r\n//       Hello <strong title={t('nameTitle')}>{{name}}</strong>, you have {{count}} unread message.\r\n//     </Trans>\r\n    \r\n//   );\r\n// }\r\n\r\nfunction MyComponent() {\r\n  const essay = \"Assignment essays are developed from set questions that give students a period of time to research a topic and produce their answer with references to their sources of information. While there are some disadvantages with using assignment essays as an assessment tool, there are sound educational purposes underpinning this practice. This essay examines the reasons why assignment essays are beneficial for student learning and considers some of the problems with this method of assessment.\";\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <Trans i18nKey=\"userMessagesUnread_plural\">\r\n     {{essay}}\r\n    </Trans>\r\n    \r\n  );\r\n}\r\n\r\n// function LanguageList(props){\r\n//   const myLang = props.country;\r\n//   const listLang = myLang.map((myLang) => <option key={myLang}>{myLang}</option>)\r\n//   return(\r\n//     <select>\r\n//       {listLang}\r\n//     </select>\r\n//   )\r\n// }\r\n\r\n// change language function\r\nconst changeLanguage = (lng) => {\r\n  i18n.changeLanguage(lng);\r\n}\r\n\r\n\r\nconst myLang = [\r\n  {\"n\": \"中文\",\"v\": \"cn\"},\r\n  {\"n\": \"English\",\"v\": \"en\"},\r\n  {\"n\": \"Bahasa Melayu\",\"v\": \"bm\"}\r\n]\r\n\r\nfunction LanguageList() {\r\n  const [lang,langList] = useState({n:'cn'})\r\n  const listLang = myLang.map((myLang) => <option key={myLang.v} value={myLang.v}>{myLang.n}</option>)\r\n\r\n  const submitValue = () => {\r\n    const frmdetails = {\r\n        'language' : lang,\r\n    }\r\n    console.log(frmdetails);\r\n  }\r\n  return(\r\n    // <form>\r\n    //   <input type=\"text\" value={lang.n} onChange={e => langList}/>\r\n    //   <input type=\"text\"/>\r\n    //   <div>your lang is {lang.n}</div>\r\n    // </form>\r\n    <div>\r\n      <select onChange={e => langList(changeLanguage(e.target.value))}>\r\n        {listLang}\r\n      </select>\r\n      {/* <button onClick={submitValue}>submit</button> */}\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App/>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}